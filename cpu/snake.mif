DEPTH = 256;
WIDTH = 32;
ADDRESS_RADIX = HEX;
DATA_RADIX = bin;
CONTENT
BEGIN

-- [00..FF] : 00000000000000000000000000000000;

-- Placeholder program to prevent Quartus from synthesizing away this RAM

-- 00 : 10001100000100010000000000100100	;		-- lw $s1, 0x9($Zero)	 / 	load word in adress 0x9 + zero to s1	// s1/r17 = 4
-- 01 : 10001100000100100000000000101000	;		-- lw $s2, 0xA($zero) 	 / 	load word in adress 0xA 	// s2/r18 = 5
-- 02 : 00000010001100101001100000100001	;		-- addu $s3, $s1, $s2 	 / 	s3 = s1 + s2				// s3/r19 = 9
-- 03 : 00000010010100111010000000100100	;		-- and $s4, $s2, $s3	 /	s4 = s2 and s3				// s4/r20 = 1
-- 04 : 00000010011101001010100000100110	;		-- xor $s5, $s3, $s4	 / 	s5 = s3 xor s4				// s5/r21 = 8
-- 05 : 00000010011100011011000000100101	;		-- or  $s6, $s3, $s1     / 	s6 = s3 or  s1				// s6/r22 = D
-- 06 : 00000010110101001011100000100011	;		-- sub $s7, $s6, $s4     /      s7 = s6 - s4				// s7/r23 = C
-- 07 : 00000010011100100000000000011001	;		-- multu $s3, $s2	 /  	Lo = s3 * s2				// LO = 2D
-- 08 : 00001000000000000000000000001000	;		-- j  8		 / 	infinite loop
-- 09 : 00000000000000000000000000000100	;		-- 4
-- 0A : 00000000000000000000000000000101	;		-- 5

00: 10001100000000010000000000100100; -- LW $s1, 0x9($Zero)

01: 10101100000000011000000000100000; -- SW $s1 to VRAM addr 0 + 32
02: 10101100000000011000000000100100; -- SW $s1 to VRAM addr 1 + 32
03: 10101100000000011000000000101000; -- SW $s1 to VRAM addr 2 + ...
04: 10101100000000011000000000101100; -- SW $s1 to VRAM addr 3
05: 10101100000000011000000000110000; -- SW $s1 to VRAM addr 4
06: 10101100000000011000000000110100; -- SW $s1 to VRAM addr 5
07: 10101100000000011000000000111000; -- SW $s1 to VRAM addr 6

08: 00001000000000000000000000000001; -- j 1 (loop it)

09: 00000000000000000000111111111111; -- The pixel colors

END;